"use client";

import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Button } from './ui/button';
import { sessionDetail } from '@/app/(routes)/dashboard/medical-agent/[sessionId]/page';
import moment from 'moment';
import { DownloadIcon } from 'lucide-react';
import { jsPDF } from "jspdf";
import { toast } from 'sonner';

export type reportContent = {
  chiefComplaint: string,
  summary: string,
  symptoms: string[],
  duration: string,
  severity: string,
  medicationsMentioned: string[],
  recommendations: string[]
}

type Props = {
  record: sessionDetail
}

// PDF Generation Function
const generatePDF = (record: sessionDetail) => {
  const doc = new jsPDF();

  const margin = 10;
  let y = margin;

  const sectionTitle = (title: string) => {
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text(title, margin, y);
    y += 7;
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
  };

  const addLine = (text: string) => {
    const lines = doc.splitTextToSize(text, 180); // Wrap text
    doc.text(lines, margin, y);
    y += lines.length * 7;
  };

  doc.setFontSize(18);
  doc.text("AI Medical Report", 70, y);
  y += 10;

  // Session Info
  sectionTitle("Session Info");
  addLine(`Doctor: ${record?.selectedDoctor?.specialist || "N/A"}`);
  addLine(`Consulted Date: ${moment(new Date(record?.createdOn)).format('lll')}`);

  // Chief Complaint
  sectionTitle("Chief Complaint");
  addLine(record?.report?.chiefComplaint || "N/A");

  // Summary
  sectionTitle("Summary");
  addLine(record?.report?.summary || "N/A");

  // Symptoms
  sectionTitle("Symptoms");
  if (record?.report?.symptoms?.length > 0) {
    record.report.symptoms.forEach(symptom => addLine(`- ${symptom}`));
  } else {
    addLine("N/A");
  }

  // Duration & Severity
  sectionTitle("Duration & Severity");
  addLine(`Duration: ${record?.report?.duration || "N/A"}`);
  addLine(`Severity: ${record?.report?.severity || "N/A"}`);

  // Medications
  sectionTitle("Medications Mentioned");
  if (record?.report?.medicationsMentioned?.length > 0) {
    record.report.medicationsMentioned.forEach(med => addLine(`- ${med}`));
  } else {
    addLine("N/A");
  }

  // Recommendations
  sectionTitle("Recommendations");
  if (record?.report?.recommendations?.length > 0) {
    record.report.recommendations.forEach(rec => addLine(`- ${rec}`));
  } else {
    addLine("N/A");
  }

  // Footer
  y += 10;
  doc.setFontSize(10);
  doc.setTextColor(150);
  doc.text("This report was generated by an AI Medical Assistant for informational purposes only.", margin, y);

  // Save PDF
  doc.save(`Medical_Report.pdf`);
  toast.success("Your medical report has been downloaded successfully.");
};

// Main Dialog Component
const ViewReportDialog = ({ record }: Props) => {
  return (
    <Dialog>
      <DialogTrigger>
        <Button variant={'link'} size={'sm'} className='cursor-pointer'> View Report </Button>
      </DialogTrigger>

      <DialogContent className="max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle asChild>
            <h2 className='text-center text-[25px]'>ðŸ©º AI Medical Report</h2>
          </DialogTitle>
          <DialogDescription asChild>
            <div className='mt-4 space-y-4'>
              {/* Session Info */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Session Info</h2>
                <div className='grid grid-cols-2 gap-4'>
                  <h2><span className='text-gray-900'>Doctor:</span> <br />{record?.selectedDoctor?.specialist}</h2>
                  <h2><span className='text-gray-900'>Consulted Date:</span><br />{moment(new Date(record?.createdOn)).format('lll')}</h2>
                </div>
              </div>

              {/* Chief Complaint */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Chief Complaint</h2>
                <p>{record?.report?.chiefComplaint}</p>
              </div>

              {/* Summary */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Summary</h2>
                <p>{record?.report?.summary}</p>
              </div>

              {/* Symptoms */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Symptoms</h2>
                <ul className="space-y-1">
                  {record?.report?.symptoms.map((symptom, index) => (
                    <li key={index} className='list-disc ml-4'>{symptom}</li>
                  ))}
                </ul>
              </div>

              {/* Duration & Severity */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Duration & Severity</h2>
                <div className='grid grid-cols-2 gap-4'>
                  <p><span className='text-gray-900'>Duration:</span> {record?.report?.duration}</p>
                  <p><span className='text-gray-900'>Severity:</span> {record?.report?.severity}</p>
                </div>
              </div>

              {/* Medications */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Medications Mentioned</h2>
                <ul className="space-y-1">
                  {record?.report?.medicationsMentioned.map((medics, index) => (
                    <li key={index} className='list-disc ml-4'>{medics}</li>
                  ))}
                </ul>
              </div>

              {/* Recommendations */}
              <div className='border p-4 rounded-2xl border-dashed'>
                <h2 className='font-bold text-blue-500 text-lg mb-2'>Recommendations</h2>
                <ul className="space-y-1">
                  {record?.report?.recommendations.map((recommend, index) => (
                    <li key={index} className='list-disc ml-4'>{recommend}</li>
                  ))}
                </ul>
              </div>

              {/* Download Button */}
              <div className='flex justify-center mt-6'>
                <Button className= "bg-red-600 text-white hover:bg-red-700 cursor-pointer" onClick={() => generatePDF(record)}> <DownloadIcon className='m-1' /> Medical Report </Button>
              </div>

              <div>
                <hr className='mt-10' />
                <p className='mt-6 text-center text-gray-400'>This report was generated by an AI Medical Assistant for information purposes only.</p>
              </div>
            </div>
          </DialogDescription>
        </DialogHeader>
      </DialogContent>
    </Dialog>
  )
}

export default ViewReportDialog;
